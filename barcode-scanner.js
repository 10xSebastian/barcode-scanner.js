// Generated by CoffeeScript 1.3.3

/*

  BarcodeScanner

  TODO:
   - configuration for when to submit
   - configuration for submit when delay ends
  
    BarcodeScanner.addPrefix "C", (text)=>
    alert(text);

    Regexp 

    BarcodeScanner "c(:term)", (term) =>
      lkajsdfkljasdf

    BarcodeScanner "*", (text) =>
      closest().val(text).closest(form).submit()

    BarcodeScanner "*", 50, (text)=> 

    BarcodeScanner regexp, delay, function
*/


(function() {
  var BarcodeScanner,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BarcodeScanner = (function() {
    var actions, buffer, delay, timer;

    function BarcodeScanner() {
      this.submit = __bind(this.submit, this);

      this.keyPress = __bind(this.keyPress, this);

      this.getCode = __bind(this.getCode, this);

      this.execute = __bind(this.execute, this);

      this.addChar = __bind(this.addChar, this);

    }

    actions = [];

    buffer = null;

    delay = 50;

    timer = null;

    BarcodeScanner.prototype.addChar = function(char) {
      var _ref;
      if ((_ref = this.buffer) == null) {
        this.buffer = "";
      }
      this.buffer += char;
      window.clearTimeout(this.timer);
      return this.timer = window.setTimeout((function() {
        return this.buffer = null;
      }), this.delay);
    };

    BarcodeScanner.prototype.execute = function() {
      var code, target;
      console.log("=============");
      console.log($("input:focus, textarea:focus").length);
      console.log("=============");
      target = $("input:focus, textarea:focus").length ? $("input:focus, textearea:focus") : $("[data-barcode-scanner-target]:last");
      code = this.getCode();
      if (typeof knownAction !== "undefined" && knownAction !== null) {

      } else {
        target.val("").val(code);
        this.submit(target);
      }
      return this.buffer = null;
    };

    BarcodeScanner.prototype.getCode = function() {
      return this.buffer.replace(/^\s\w\s/, "");
    };

    BarcodeScanner.prototype.keyPress = function(e) {
      var char, charCode;
      if (e == null) {
        e = window.event;
      }
      charCode = typeof e.which === "number" ? e.which : e.keyCode;
      char = String.fromCharCode(charCode);
      if ((charCode === 13) && (this.buffer != null)) {
        e.preventDefault();
        return this.execute();
      } else {
        return this.addChar(char);
      }
    };

    BarcodeScanner.prototype.submit = function(target) {
      if (!target.closest("[data-prevent-barcode-scanner-target]").length) {
        return target.closest("form").submit();
      }
    };

    return BarcodeScanner;

  })();

  window.BarcodeScanner = new BarcodeScanner();

  $(window).keypress(window.BarcodeScanner.keyPress);

}).call(this);
